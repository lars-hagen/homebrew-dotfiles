name: Update and Validate Windsurf Cask

on:
  schedule:
    - cron: "0 0 * * *" # Run daily at midnight
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-and-validate:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install Dependencies
        run: |
          brew install jq

      - name: Fetch Latest Version and SHA256
        id: fetch-version
        run: |
          # Fetch the metadata from the API
          API_RESPONSE=$(curl -s "https://windsurf-stable.codeium.com/api/update/darwin-arm64-dmg/stable/latest")
          
          # Extract information using jq
          DMG_URL=$(echo "$API_RESPONSE" | jq -r .url)
          VERSION=$(echo "$API_RESPONSE" | jq -r .windsurfVersion)
          SHA256=$(echo "$API_RESPONSE" | jq -r .sha256hash)
          
          echo "DMG_URL=$DMG_URL" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "SHA256=$SHA256" >> $GITHUB_ENV
          
          # Store version for comparison
          echo "LATEST_VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Check Current Version
        id: check-version
        run: |
          CURRENT_VERSION=$(grep -m 1 'version "' Casks/windsurf.rb | cut -d'"' -f2)
          echo "Current version: $CURRENT_VERSION"
          echo "Latest version: ${{ steps.fetch-version.outputs.LATEST_VERSION }}"
          
          if [ "$CURRENT_VERSION" != "${{ steps.fetch-version.outputs.LATEST_VERSION }}" ]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "New version available: ${{ steps.fetch-version.outputs.LATEST_VERSION }}"
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
            echo "Already at latest version"
          fi

      - name: Update Cask File
        if: steps.check-version.outputs.version_changed == 'true'
        run: |
          # Create a temporary file with the new content
          cat > Casks/windsurf.rb.new << EOL
          cask "windsurf" do
            version "$VERSION"
            sha256 "$SHA256"
          
            url "$DMG_URL",
                verified: "windsurf-stable.codeiumdata.com/"
            name "Windsurf"
            desc "Windsurf Editor by Codeium"
            homepage "https://codeium.com/windsurf"
          
            auto_updates true
          
            app "Windsurf.app"
          end
          EOL
          
          # Replace the old file with the new one
          mv Casks/windsurf.rb.new Casks/windsurf.rb

      - name: Commit Changes
        if: steps.check-version.outputs.version_changed == 'true'
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add Casks/windsurf.rb
          git commit -m "Update Windsurf cask to version $VERSION"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Windsurf Cask
        run: |
          brew untap lars-hagen/homebrew-dotfiles || true
          brew tap lars-hagen/homebrew-dotfiles https://github.com/lars-hagen/homebrew-dotfiles.git
          brew install --cask --verbose windsurf

      - name: Create Windsurf Binary
        run: |
          mkdir -p "$HOME/.codeium/windsurf/bin"
          cat > "$HOME/.codeium/windsurf/bin/windsurf" << 'EOL'
          #!/usr/bin/env bash
          #
          # Copyright (c) Microsoft Corporation. All rights reserved.
          # Licensed under the MIT License. See License.txt in the project root for license information.

          # when run in remote terminal, use the remote cli
          if [ -n "$VSCODE_IPC_HOOK_CLI" ]; then
            REMOTE_CLI="$(which -a 'windsurf' | grep /remote-cli/)"
            if [ -n "$REMOTE_CLI" ]; then
              "$REMOTE_CLI" "$@"
              exit $?
            fi
          fi

          function app_realpath() {
            SOURCE=$1
            while [ -h "$SOURCE" ]; do
              DIR=$(dirname "$SOURCE")
              SOURCE=$(readlink "$SOURCE")
              [[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE
            done
            SOURCE_DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
            echo "${SOURCE_DIR%%${SOURCE_DIR#*.app}}"
          }

          APP_PATH="/Applications/Windsurf.app"
          CONTENTS="$APP_PATH/Contents"
          ELECTRON="$CONTENTS/MacOS/Electron"
          CLI="$CONTENTS/Resources/app/out/cli.js"
          export VSCODE_NODE_OPTIONS=$NODE_OPTIONS
          export VSCODE_NODE_REPL_EXTERNAL_MODULE=$NODE_REPL_EXTERNAL_MODULE
          unset NODE_OPTIONS
          unset NODE_REPL_EXTERNAL_MODULE
          ELECTRON_RUN_AS_NODE=1 "$ELECTRON" "$CLI" "$@"
          exit $?
          EOL
          chmod +x "$HOME/.codeium/windsurf/bin/windsurf"

      - name: Verify Installation
        run: |
          echo "Checking Windsurf version..."
          "$HOME/.codeium/windsurf/bin/windsurf" --version || true
          echo "Checking Windsurf help..."
          "$HOME/.codeium/windsurf/bin/windsurf" --help || true

      - name: Cleanup
        if: always()
        run: |
          brew untap lars-hagen/homebrew-dotfiles || true
          rm -rf /opt/homebrew/Library/Taps/lars-hagen/homebrew-dotfiles || true